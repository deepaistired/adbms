use myNewDatabase;
db.createCollection("myNewCollection");


->db.student.insertOne({ name: "Angela", age: 27 });
GUI - {
  "name": "Angela",
  "age": 27
}

->db.student.insertMany([
  { name: "Angela", age: 27 },
  { name: "Ravi", age: 22 },
  { name: "Mina", age: 25 }
]);
GUI- [{"name":"Angela","age":27},{"name":"Ravi","age":22},{"name":"Mina",age:25}]
->db.student.deleteOne({name:"Deepa"});
->db.users.find()
->db.users.find({ age: { $gt: 29 } }, { name: 1, age: 1 })
GUI - {"age":{$gt:29}}
-{"name":1,"age":1,"_id":0} (options and project section)
->db.users.findOne({ name: "Jim" })
->GUI - { Name: "Abhinav" }
->db.users.updateOne({ name: "Angela" }, { $set: { email: "angela@gmail.com" } })
->db.users.updateMany({ age: { $lt: 30 } }, { $set: { status: "active" } })
->db.users.deleteMany({ age: { $lt: 30 } })
->db.users.drop()

AGGREGATION :
1)sum/total:
{
  _id:"$Student_City",
  "total_students": 
   { "$sum": 1 }
  
}
2)avg - {
  _id:"$Instructor_Id",
  "total_students": 
   { "$avg": "$Student_Id" }
  
}
3)range- {Student_Id:{$gt:1000,$lt:1010}}
4)in- {
  "Student_City": { "$in": ["Nashik", "Mumbai"] }
}
(for or queries)
5)not in - {
  "Student_City": { $nin: ["Pune"] }
}
6)exists- {
  Instructor_Id:{"$exists":false}
}
or {"Instructor":null}
7)count - {
  _id:"$Student_City",
  "total_students": 
   {"$sum":1}
  
}
8){total_students:-1}
9)Update All Students from 'Mumbai' to 'Pune' (filter + update)
{
  "Student_City": "Mumbai"
}
{
  "$set": { "Student_City": "Pune" }
}

10){ "Instructor_Id": { "$exists": false } }
filter and then delete Many
11){ Student_City: "Mumbai" , Student_Name:"Ankita",Student_Id:2001} filter specific to delete
12)indexing : filter {}, project field : {_id:0}
Indexing :
Single Field	Index on a single field for sorting or querying	db.studentgrades.find({ name: "John" })
Compound	Index on multiple fields for complex queries	db.studentgrades.find({ name: "John", age: 21 })
Text	         Index for full-text search on string fields	db.studentgrades.find({ $text: { $search: "John" } })
Hashed	   Hashes a field for distribution (useful for sharding)	db.studentgrades.find({ Student_Id: 12345 })
2dsphere	Geospatial index for spherical coordinates	db.studentgrades.find({ location: { $nearSphere: { type: "Point", coordinates: [ <longitude>, <latitude> ] } } })
TTL	Expire documents after a certain time (time-to-live)	db.studentgrades.find({ created_at: { $lte: new Date() } })


->db.studentgrades.createIndex({ Student_Id: "hashed" }, { name: "StudentIdHashedIndex" })
->only city- projection { "city": 1,_id:0}
->find all the cities in the state of all filter {state:"AL"} projection {_id:0,loc:0,pop:0}
->pop greater than and less than {pop:{$gt:30000,$lt:70000}}
sample data insertion :
{
  "_id": "35031",
  "city": "BLOUNTSVILLE",
  "loc": [-86.568628, 34.092937],
  "pop": 9058,
  "state": "AL"
}

->Comparison Operators:
1)$eq , db.zips.find({ pop: { $eq: 9058 } })
2)$gt, db.zips.find({ pop: { $gt: 10000 } })
3)$lt,db.zips.find({ pop: { $lt: 30000 } })
4)$lte, db.zips.find({ pop: { $lte: 5000 } })
5)$gte,db.zips.find({ pop: { $lte: 5000 } })
6)$ne,db.zips.find({ state: { $ne: "CA" } })
7)$in, db.zips.find({ state: { $in: ["CA", "TX", "NY"] } })
8)$nin,db.zips.find({ state: { $nin: ["CA", "TX", "NY"] } })
//db.movieDetails.find({"rated": {"$ne": "NOT RATED"}}, 
    {"_id":0, "title":1, "rated":1})
//db.movieDetails.find({"runtime": {"$gt": 180},
    "imdb.rating": {"$gt":8}}, 
    {"title": 1, "_id": 0})
//db.movieDetails.find({"genres": {"$in": ["Sport", "Talk-Show", "News"]}}, 
    {"_id":0, "title":1, "genres":1})

->Logical Operators:
1)$and,{$and:[{"state":"AL"},{"pop":{$gt:9000}}]}
2)$or,{
  "$or": [
    { "pop": { "$gt": 10000 } },
    { "state": "AL" }
  ]
}

3)$not,{
  state: { $not: { $eq: "AL" } }
}

4)$nor,{
  $nor: [{ pop: { $gt: 10000 } }, { state: "AL" }]
}
->db.movieDetails.find({"$or": [
    {"imdb.rating": {"$gt": 8.5}}, 
    {"metacritic": {"$gt": 85}}]}, 
        {"_id": 0, "title": 1, "imdb.rating": 1, "metacritic": 1})
->db.movieDetails.find({
    "tomato.meter": {"$lt": 50}, 
    "tomato.meter": {"$ne": null}}, 
    {"_id": 0, "title": 1, "tomato.meter": 1})


->Element Operators:
1){state:{$exists:true}}
2){ "pop": { "$type": "number" } }


->Array operators:
1)$all (has to be an array),{ loc: { $all: [-86.56, 33.00] } }
{"loc.0":{$lt:-87}}
2)$eleMatch,{ cities: { $elemMatch: { $eq: "LOGAN" } } }
3)$size,{ "tags": { "$size": 3 } }

//{
  "_id": 1,
  "tags": ["mongo", "database", "json"]
}


aggregate operations:
1)group by
{
  _id:"$city",
  studentcount: {
    $sum: 1
  }
}
projection:{
  "city":1,
  "student_name":1
}
sort : {
  "pop": -1
}
//average grade of students grouped by the number of subjects they are enrolled in
[
  { 
    "$project": { 
      "student_name": 1, 
      "grades_count": { "$size": "$grades" },
      "average_grade": { "$avg": "$grades" }
    }
  },
  {
    "$group": { 
      "_id": "$grades_count", 
      "average_grade": { "$avg": "$average_grade" },
      "total_students": { "$sum": 1 }
    }
  }
]
[
  {
    "$group": {
      "_id": "$state",
      "max_population": { "$max": "$pop" }
    }
  }
]
{
  _id:"$state",
 highestpop: {
    "$min": "$pop"
  }
}
